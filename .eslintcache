[{"/home/bluedev/mc-micro-react/src/index.js":"1","/home/bluedev/mc-micro-react/src/reportWebVitals.js":"2","/home/bluedev/mc-micro-react/src/App.js":"3","/home/bluedev/mc-micro-react/src/pages/createServer.js":"4","/home/bluedev/mc-micro-react/src/pages/homePage.js":"5","/home/bluedev/mc-micro-react/src/pages/serverList.js":"6","/home/bluedev/mc-micro-react/src/pages/updateServer.js":"7","/home/bluedev/mc-micro-react/src/pages/deleteServer.js":"8","/home/bluedev/mc-micro-react/src/components/cycleButton.js":"9","/home/bluedev/mc-micro-react/src/functions/restRequests.js":"10","/home/bluedev/mc-micro-react/src/components/serverViewer.js":"11"},{"size":651,"mtime":1610031598213,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609789809428,"results":"14","hashOfConfig":"13"},{"size":721,"mtime":1610031605669,"results":"15","hashOfConfig":"13"},{"size":1038,"mtime":1609789809428,"results":"16","hashOfConfig":"13"},{"size":706,"mtime":1609789809428,"results":"17","hashOfConfig":"13"},{"size":909,"mtime":1610421878804,"results":"18","hashOfConfig":"13"},{"size":301,"mtime":1609789809428,"results":"19","hashOfConfig":"13"},{"size":288,"mtime":1609789809428,"results":"20","hashOfConfig":"13"},{"size":656,"mtime":1609789809428,"results":"21","hashOfConfig":"13"},{"size":2490,"mtime":1610413887358,"results":"22","hashOfConfig":"13"},{"size":529,"mtime":1610037604626,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1u42vl0",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/bluedev/mc-micro-react/src/index.js",[],["48","49"],"/home/bluedev/mc-micro-react/src/reportWebVitals.js",[],"/home/bluedev/mc-micro-react/src/App.js",[],"/home/bluedev/mc-micro-react/src/pages/createServer.js",[],"/home/bluedev/mc-micro-react/src/pages/homePage.js",[],"/home/bluedev/mc-micro-react/src/pages/serverList.js",[],"/home/bluedev/mc-micro-react/src/pages/updateServer.js",[],"/home/bluedev/mc-micro-react/src/pages/deleteServer.js",[],"/home/bluedev/mc-micro-react/src/components/cycleButton.js",[],"/home/bluedev/mc-micro-react/src/functions/restRequests.js",["50","51"],"async function getServerInfo(serverId) {\n\tconst result = await fetch(global.apiBaseUrl + \"/server?\" + serverId);\n\treturn result;\n}\n// == User Requests ======================================================\n\nexports.signUp = async (newUserData) => {\n\tconsole.log(\"signUp works!\");\n\t// Should return new user object and success message\n\t// Should also update JWT cookie with fresh session\n};\n\nexports.logIn = async (username, password) => {\n\tconsole.log(\"logIn works!\");\n\t// Should respond with success and new JWT or 403\n};\n\nexports.logOut = async () => {\n\tconsole.log(\"logOut works!\");\n\t// Should respond with success and clear JWT and related session ID\n};\n\n// == Server REST ========================================================\n\nexports.createServer = async (params) => {\n\tconsole.log(\"createServer works!\");\n\t// Should return with server object and success or error message\n\treturn new Promise.reject(new Error(\"Didnt work...\"));\n};\n\nexports.startServer = async (serverId) => {\n\t// Should return with success or failure message\n\tconsole.log(\"startServer works!\");\n};\n\nexports.stopServer = async (serverId) => {\n\t// Should return with success or failure message\n\tconsole.log(\"stopServer works!\");\n};\n\nexports.deleteServer = async (serverId) => {\n\t// Should return with success or failure message\n\tconsole.log(\"deleteServer works!\");\n};\n\n// == Server Details =====================================================\n\nexports.getServers = async () => {\n\t// Should return with list of all servers bound to the current user\n\tconsole.log(\"getServers works!\");\n\tlet results = await fetch(global.apiBaseUrl + \"/getServers\").then((res) => res.json());\n\tconsole.log(results);\n\treturn [];\n};\n\nexports.getServer = async (serverId) => {\n\t// Should return the serverObject of specified server only, or error message\n\tconsole.log(\"getServer works!\");\n};\n\n// == Webhooks ===========================================================\n\nexports.subscribeToServersStatus = async (servers) => {\n\t// TODO: Impliment webhooks to keep tabs on servers status and player count\n\tconsole.log(\"serverSubscribe works!\");\n};\n\n// ==========================================================================\n\nasync function post(route, bodyJson) {\n\tlet url = global.apiBaseUrl + route;\n\n\treturn await fetch(url, {\n\t\tmethod: \"post\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tcredentials: \"include\",\n\t\tbody: JSON.stringify(bodyJson),\n\t})\n\t\t.then((res) => res.json())\n\t\t.catch((err) => console.trace(err));\n}\n","/home/bluedev/mc-micro-react/src/components/serverViewer.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":16,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},{"ruleId":"56","severity":1,"message":"60","line":70,"column":16,"nodeType":"58","messageId":"59","endLine":70,"endColumn":20},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'getServerInfo' is defined but never used.","Identifier","unusedVar","'post' is defined but never used.","no-global-assign","no-unsafe-negation"]